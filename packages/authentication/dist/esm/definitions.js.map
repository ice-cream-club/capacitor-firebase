{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type { PluginListenerHandle } from '@capacitor/core';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    /**\n     * These configuration values are available:\n     *\n     * @since 0.1.0\n     */\n    FirebaseAuthentication?: {\n      /**\n       * Configure whether the plugin should skip the native authentication.\n       * Only needed if you want to use the Firebase JavaScript SDK.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default false\n       * @example false\n       * @since 0.1.0\n       */\n      skipNativeAuth?: boolean;\n      /**\n       * Configure which providers you want to use so that only the providers you need are fully initialized.\n       * If you do not configure any providers, they will be all initialized.\n       * Please note that this does not prevent the automatic initialization of third-party SDKs.\n       *\n       * Only available for Android and iOS.\n       *\n       * @default [\"apple.com\", \"facebook.com\", \"github.com\", \"google.com\", \"microsoft.com\", \"playgames.google.com\", \"twitter.com\", \"yahoo.com\", \"phone\"]\n       * @example [\"apple.com\", \"google.com\"]\n       * @since 0.1.0\n       */\n      providers?: string[];\n    };\n  }\n}\n\nexport interface FirebaseAuthenticationPlugin {\n  /**\n   * Applies a verification code sent to the user by email.\n   *\n   * @since 0.2.2\n   */\n  applyActionCode(options: ApplyActionCodeOptions): Promise<void>;\n  /**\n   * Creates a new user account with email and password.\n   * If the new account was created, the user is signed in automatically.\n   *\n   * @since 0.2.2\n   */\n  createUserWithEmailAndPassword(\n    options: CreateUserWithEmailAndPasswordOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Completes the password reset process.\n   *\n   * @since 0.2.2\n   */\n  confirmPasswordReset(options: ConfirmPasswordResetOptions): Promise<void>;\n  /**\n   * Fetches the currently signed-in user.\n   *\n   * @since 0.1.0\n   */\n  getCurrentUser(): Promise<GetCurrentUserResult>;\n  /**\n   * Fetches the Firebase Auth ID Token for the currently signed-in user.\n   *\n   * @since 0.1.0\n   */\n  getIdToken(options?: GetIdTokenOptions): Promise<GetIdTokenResult>;\n  /**\n   * Sends a verification email to the currently signed in user.\n   *\n   * @since 0.2.2\n   */\n  sendEmailVerification(): Promise<void>;\n  /**\n   * Sends a password reset email.\n   *\n   * @since 0.2.2\n   */\n  sendPasswordResetEmail(options: SendPasswordResetEmailOptions): Promise<void>;\n  /**\n   * Sets the user-facing language code for auth operations.\n   *\n   * @since 0.1.0\n   */\n  setLanguageCode(options: SetLanguageCodeOptions): Promise<void>;\n  /**\n   * Starts the Apple sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithApple(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the Custom Token sign-in flow.\n   *\n   * This method cannot be used in combination with `skipNativeAuth` on Android and iOS.\n   * In this case you have to use the `signInWithCustomToken` interface of the Firebase JS SDK directly.\n   *\n   * @since 0.1.0\n   */\n  signInWithCustomToken(\n    options: SignInWithCustomTokenOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Starts the sign-in flow using an email and password.\n   *\n   * @since 0.2.2\n   */\n  signInWithEmailAndPassword(\n    options: SignInWithEmailAndPasswordOptions,\n  ): Promise<SignInResult>;\n  /**\n   * Starts the Facebook sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithFacebook(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the GitHub sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithGithub(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the Google sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithGoogle(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the Microsoft sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithMicrosoft(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the sign-in flow using a phone number.\n   *\n   * Either the phone number or the verification code and verification ID must be provided.\n   *\n   * Only available for Android and iOS.\n   *\n   * @since 0.1.0\n   */\n  signInWithPhoneNumber(\n    options: SignInWithPhoneNumberOptions,\n  ): Promise<SignInWithPhoneNumberResult>;\n  /**\n   * Starts the Play Games sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithPlayGames(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the Twitter sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithTwitter(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the Yahoo sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  signInWithYahoo(options?: SignInOptions): Promise<SignInResult>;\n  /**\n   * Starts the sign-out flow.\n   *\n   * @since 0.1.0\n   */\n  signOut(): Promise<void>;\n  /**\n   * Updates the email address of the currently signed in user.\n   *\n   * @since 0.1.0\n   */\n  updateEmail(options: UpdateEmailOptions): Promise<void>;\n  /**\n   * Updates the password of the currently signed in user.\n   *\n   * @since 0.1.0\n   */\n  updatePassword(options: UpdatePasswordOptions): Promise<void>;\n  /**\n   * Sets the user-facing language code to be the default app language.\n   *\n   * @since 0.1.0\n   */\n  useAppLanguage(): Promise<void>;\n  /**\n   * Instrument your app to talk to the Authentication emulator.\n   *\n   * @since 0.2.0\n   */\n  useEmulator(options: UseEmulatorOptions): Promise<void>;\n  /**\n   * Listen for the user's sign-in state changes.\n   *\n   * @since 0.1.0\n   */\n  addListener(\n    eventName: 'authStateChange',\n    listenerFunc: AuthStateChangeListener,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  /**\n   * Remove all listeners for this plugin.\n   *\n   * @since 0.1.0\n   */\n  removeAllListeners(): Promise<void>;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface ApplyActionCodeOptions {\n  /**\n   * A verification code sent to the user.\n   *\n   * @since 0.2.2\n   */\n  oobCode: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface ConfirmPasswordResetOptions {\n  /**\n   * A verification code sent to the user.\n   *\n   * @since 0.2.2\n   */\n  oobCode: string;\n  /**\n   * The new password.\n   *\n   * @since 0.2.2\n   */\n  newPassword: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface CreateUserWithEmailAndPasswordOptions {\n  /**\n   * @since 0.2.2\n   */\n  email: string;\n  /**\n   * @since 0.2.2\n   */\n  password: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface GetCurrentUserResult {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 0.1.0\n   */\n  user: User | null;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface GetIdTokenOptions {\n  /**\n   * Force refresh regardless of token expiration.\n   *\n   * @since 0.1.0\n   */\n  forceRefresh: boolean;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface GetIdTokenResult {\n  /**\n   * The Firebase Auth ID token JWT string.\n   *\n   * @since 0.1.0\n   */\n  token: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface SendPasswordResetEmailOptions {\n  /**\n   * @since 0.2.2\n   */\n  email: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SetLanguageCodeOptions {\n  /**\n   * BCP 47 language code.\n   *\n   * @example \"en-US\"\n   * @since 0.1.0\n   */\n  languageCode: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface UpdateEmailOptions {\n  /**\n   * The new email address.\n   *\n   * @since 0.2.2\n   */\n  newEmail: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface UpdatePasswordOptions {\n  /**\n   * The new password.\n   *\n   * @since 0.2.2\n   */\n  newPassword: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInOptions {\n  /**\n   * Configures custom parameters to be passed to the identity provider during the OAuth sign-in flow.\n   *\n   * @since 0.1.0\n   */\n  customParameters?: SignInCustomParameter[];\n  /**\n   * Scopes to request from provider.\n   *\n   * @since 0.3.1\n   */\n  scopes?: string[];\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInCustomParameter {\n  /**\n   * The custom parameter key (e.g. `login_hint`).\n   *\n   * @since 0.1.0\n   */\n  key: string;\n  /**\n   * The custom parameter value (e.g. `user@firstadd.onmicrosoft.com`).\n   *\n   * @since 0.1.0\n   */\n  value: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInWithPhoneNumberOptions {\n  /**\n   * The phone number to be verified.\n   *\n   * @since 0.1.0\n   */\n  phoneNumber?: string;\n  /**\n   * The verification ID which will be returned when `signInWithPhoneNumber` is called for the first time.\n   * The `verificationCode` must also be provided.\n   *\n   * @since 0.1.0\n   */\n  verificationId?: string;\n  /**\n   * The verification code from the SMS message.\n   * The `verificationId` must also be provided.\n   *\n   * @since 0.1.0\n   */\n  verificationCode?: string;\n}\n\n/**\n * @since 0.2.2\n */\nexport interface SignInWithEmailAndPasswordOptions {\n  /**\n   * The users email address.\n   *\n   * @since 0.2.2\n   */\n  email: string;\n  /**\n   * The users password.\n   *\n   * @since 0.2.2\n   */\n  password: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInWithCustomTokenOptions {\n  /**\n   * The custom token to sign in with.\n   *\n   * @since 0.1.0\n   */\n  token: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInResult {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 0.1.0\n   */\n  user: User | null;\n  /**\n   * Credentials returned by an auth provider.\n   *\n   * @since 0.1.0\n   */\n  credential: AuthCredential | null;\n}\n\n/**\n * @since 0.2.0\n */\nexport interface UseEmulatorOptions {\n  /**\n   * The emulator host (e.g. `10.0.2.2`).\n   *\n   * @since 0.2.0\n   */\n  host: string;\n  /**\n   * The emulator port (e.g. `9099`).\n   *\n   * @default 9099\n   * @since 0.2.0\n   */\n  port?: number;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface SignInWithPhoneNumberResult extends SignInResult {\n  /**\n   * The verification ID, which is needed to identify the verification code.\n   *\n   * @since 0.1.0\n   */\n  verificationId?: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface User {\n  /**\n   * @since 0.1.0\n   */\n  displayName: string | null;\n  /**\n   * @since 0.1.0\n   */\n  email: string | null;\n  /**\n   * @since 0.1.0\n   */\n  emailVerified: boolean;\n  /**\n   * @since 0.1.0\n   */\n  isAnonymous: boolean;\n  /**\n   * @since 0.1.0\n   */\n  phoneNumber: string | null;\n  /**\n   * @since 0.1.0\n   */\n  photoUrl: string | null;\n  /**\n   * @since 0.1.0\n   */\n  providerId: string;\n  /**\n   * @since 0.1.0\n   */\n  tenantId: string | null;\n  /**\n   * @since 0.1.0\n   */\n  uid: string;\n}\n\n/**\n * @since 0.1.0\n */\nexport interface AuthCredential {\n  /**\n   * The authentication provider ID for the credential.\n   *\n   * @example \"google.com\"\n   * @since 0.1.0\n   */\n  providerId: string;\n  /**\n   * The OAuth access token associated with the credential if it belongs to an OAuth provider.\n   *\n   * @since 0.1.0\n   */\n  accessToken?: string;\n  /**\n   * The OAuth ID token associated with the credential if it belongs to an OIDC provider.\n   *\n   * @since 0.1.0\n   */\n  idToken?: string;\n  /**\n   * The OAuth access token secret associated with the credential if it belongs to an OAuth 1.0 provider.\n   *\n   * @since 0.1.0\n   */\n  secret?: string;\n  /**\n   * The random string used to make sure that the ID token you get was granted specifically in response to your app's authentication request.\n   *\n   * @since 0.1.0\n   */\n  nonce?: string;\n}\n\n/**\n * Callback to receive the user's sign-in state change notifications.\n *\n * @since 0.1.0\n */\nexport type AuthStateChangeListener = (change: AuthStateChange) => void;\n\n/**\n * @since 0.1.0\n */\nexport interface AuthStateChange {\n  /**\n   * The currently signed-in user, or null if there isn't any.\n   *\n   * @since 0.1.0\n   */\n  user: User | null;\n}\n"]}